program -> declaration* EOF ;

declaration -> varDecl | functionDecl | classDecl | statement ;

statement -> exprStmt | ifStmt | whileStmt | printStmt | breakStmt | block ;
varDecl -> "var" IDENTIFIER ("=" expression)? ";" ;
functionDecl -> "funct" function ;  
classDecl -> "class" IDENTIFIER "{" ("meth" function)* "}" ;

exprStmt -> expression ";" ;
ifStmt -> "if" "(" expression ")" statement ( "else" statement )?
whileStmt -> "while" "(" expression ")" statement ( "finally" statement )?
printStmt -> "print" expression ";" ;
breakStmt -> "break" ";" ;
block -> "{" declaration* "}" ;
function -> IDENTIFIER "(" parameters? ")" block ;

expression -> assignment ;
assignment -> (call ".")? IDENTIFIER "=" assignment | logic_or ;
logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;

equality -> comparison ( ( "!=" | "==" ) comparison )\* ;
comparison -> term (( < | > | <= | >= ) term)\* ;
term -> factor ( ( "+" | "-" ) term )\* ;
factor -> unary ( ("/" | "\*") unary )\* ; ;
unary -> ( "!" | "-" ) unary | primary ;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary -> literal | grouping | IDENTIFIER ;

literal -> NUMBER | STRING | "true" | "false" | nil ;
grouping -> "(" expression ")" ;
binary -> expression operator expression ;
operator -> "\*" | "/" | "%" | "+" | "-" | "==" | "!=" | "<" | ">" | "<=" | ">=" ;
arguments -> expression ( "," expression )* ; 
parameters -> IDENTIFIER ( "," IDENTIFIER )* ;
